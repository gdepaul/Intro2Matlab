function [] = lecture8()

%% Lecture 8 - Eigenvalue Decomposition, Low Rank Approximations and Principal Component Analysis

%% Basics of Eigenvalues and Eigenvectors

% A = [1,2; 4,3]
% 
% A = [1,2,1;6,-1,0;-1,-2,-1]


%% Raising Matrices to Large Powers

x = [1; 0]
A = [1,1;1,0]

disp('Part')

disp('Calculate the 100th Fibonacci number using Eigenvalue Decomposition. ')


A^4*x

%[V,D] = eig(A)
% 
% 
% %% Low Rank Image Appoximations
% 
% disp('Perform Eigenvalue Diagonalization to Obtain the Low Rank Image')
% disp('a.) Extract and display the egghead image (use imshow)')
% A = im2double(rgb2gray(imread('egghead.jpeg')));
% disp('b.) Select the 20 primary eigenvectors')
% disp('c.) Calculate and display low rank approximation')
% 
% 
% disp('Perform Eigenvalue Diagonalization to Obtain the Low Rank Image')
% disp('a.) Extract and display the uc davis logo image (use imshow)')
% A = im2double(rgb2gray(imread('egghead.jpeg')));
% disp('b.) Select the 20 primary eigenvectors')
% disp('c.) Calculate and display low rank approximation')
% 
% 
% %% Principal Component Analysis
% 
% disp('Perform PCA on the Iris dataset. Is it linearly separable?')
% 
% M = xlsread("iris.xlsx");
% X = M(:,1:4);
% y = M(:,5);
% 
% display_iris_plotmatrix(X,y)
% 
% Sigma = cov(X)
% 
% [V,D] = eig(Sigma);
% 
% comp1 = project_matrix_onto_vector(X,transpose(V(1,:)));
% comp2 = project_matrix_onto_vector(X,transpose(V(2,:)));
% figure()
% scatter(comp1, comp2, 50, y, 'filled')
% 
% disp('Perform PCA on the breast cancer dataset. Is it linearly separable?')
% M = xlsread("breast-cancer-wisconsin.xlsx")
% [m,n] = size(M)
% X = M(:,1:n-1)
% y = M(:,n)
% 
% disp('Perform PCA on the winequality dataset. Is it linearly separable?')
% M = xlsread("winequality-red.xlsx")
% [m,n] = size(M)
% X = M(:,1:n-1)
% y = M(:,n)



end

function Z = project_matrix_onto_vector(A, v) 

    [m,n] = size(A);
    Z = zeros(m,1);
    
    for i=1:m
       Z(i,:) = projection_of_b_onto_a(A(i,:)',v);
    end
 
end

function z = projection_of_b_onto_a(b,a)
    
    z = (transpose(b)*a)/(transpose(a)*a);

end

function [] = display_iris_plotmatrix(A,y)
    figure()
    [~,ax]=gplotmatrix(A,[],y);
    ax(1,1).YLabel.String='Sepal L';
    ax(2,1).YLabel.String='Sepal W';
    ax(3,1).YLabel.String='Petal L';
    ax(4,1).YLabel.String='Petal W';
    ax(4,1).XLabel.String='Sepal L';
    ax(4,2).XLabel.String='Sepal W';
    ax(4,3).XLabel.String='Petal L';
    ax(4,4).XLabel.String='Petal W';
end 

